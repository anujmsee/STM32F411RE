
stm32f411re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009cc  080009d4  000109d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009cc  080009cc  000109d4  2**0
                  CONTENTS
  4 .ARM          00000000  080009cc  080009cc  000109d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009cc  080009d4  000109d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009d0  080009d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009d4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012a5  00000000  00000000  00010a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000383  00000000  00000000  00011ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00012030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  000120f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e88  00000000  00000000  00012198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f1b  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000089f0  00000000  00000000  00014f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001d92b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001d980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009b4 	.word	0x080009b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080009b4 	.word	0x080009b4

080001d8 <delay>:
#define LOW										0
#define HIGH									1
#define BTN_PRESSED 							LOW

void delay(uint32_t Delay)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<Delay; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d3f8      	bcc.n	80001e6 <delay+0xe>
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
	...

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GPIOBtn;
	memset(&GpioLed,0,sizeof(GpioLed));
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	220c      	movs	r2, #12
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fbc6 	bl	80009a4 <memset>
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 8000218:	463b      	mov	r3, r7
 800021a:	220c      	movs	r2, #12
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fbc0 	bl	80009a4 <memset>

	GpioLed.pGPIOx = GPIOA;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <main+0x8c>)
 8000226:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000228:	2308      	movs	r3, #8
 800022a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800022c:	2301      	movs	r3, #1
 800022e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000230:	2300      	movs	r3, #0
 8000232:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000234:	2300      	movs	r3, #0
 8000236:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_NO_PUPD;
 8000238:	2300      	movs	r3, #0
 800023a:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800023c:	2101      	movs	r1, #1
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <main+0x8c>)
 8000240:	f000 f864 	bl	800030c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f8ff 	bl	800044c <GPIO_Init>

	/* User button logic for toggling LED based on button toggle*/
	GPIOBtn.pGPIOx = GPIOA;										// Button is on PB12 i.e. Port B and Pin 12
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x8c>)
 8000250:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;		// Assigning pin #12 to the GPIO
 8000252:	2309      	movs	r3, #9
 8000254:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;			// Button is interrupt mode for a falling edge trigger
 8000256:	2304      	movs	r3, #4
 8000258:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	71bb      	strb	r3, [r7, #6]
//	GPIOBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_PIN_PU;
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);						// Enable peripheral clock for GPIOB
 8000262:	2101      	movs	r1, #1
 8000264:	480a      	ldr	r0, [pc, #40]	; (8000290 <main+0x8c>)
 8000266:	f000 f851 	bl	800030c <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f8ed 	bl	800044c <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_9, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2109      	movs	r1, #9
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x8c>)
 8000278:	f000 fa66 	bl	8000748 <GPIO_WriteToOutputPin>
	//IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO15);
 800027c:	210f      	movs	r1, #15
 800027e:	2017      	movs	r0, #23
 8000280:	f000 fb22 	bl	80008c8 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	2017      	movs	r0, #23
 8000288:	f000 fa98 	bl	80007bc <GPIO_IRQInterruptConfig>

	while(1);
 800028c:	e7fe      	b.n	800028c <main+0x88>
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <EXTI9_5_IRQHandler>:

}

void EXTI9_5_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	// handle the interrupt
	delay(500000/2);
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <EXTI9_5_IRQHandler+0x1c>)
 800029a:	f7ff ff9d 	bl	80001d8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_9);
 800029e:	2009      	movs	r0, #9
 80002a0:	f000 fb3c 	bl	800091c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_8);
 80002a4:	2108      	movs	r1, #8
 80002a6:	4803      	ldr	r0, [pc, #12]	; (80002b4 <EXTI9_5_IRQHandler+0x20>)
 80002a8:	f000 fa73 	bl	8000792 <GPIO_ToggleOutputPin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	0003d090 	.word	0x0003d090
 80002b4:	40020000 	.word	0x40020000

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fb39 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff8b 	bl	8000204 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	080009d4 	.word	0x080009d4
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIO_PeriClockControl>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d141      	bne.n	80003a2 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a43      	ldr	r2, [pc, #268]	; (8000430 <GPIO_PeriClockControl+0x124>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000326:	4b43      	ldr	r3, [pc, #268]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a42      	ldr	r2, [pc, #264]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000332:	e077      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a40      	ldr	r2, [pc, #256]	; (8000438 <GPIO_PeriClockControl+0x12c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800033c:	4b3d      	ldr	r3, [pc, #244]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a3c      	ldr	r2, [pc, #240]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e06c      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a3b      	ldr	r2, [pc, #236]	; (800043c <GPIO_PeriClockControl+0x130>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a37      	ldr	r2, [pc, #220]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e061      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a37      	ldr	r2, [pc, #220]	; (8000440 <GPIO_PeriClockControl+0x134>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000368:	4b32      	ldr	r3, [pc, #200]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a31      	ldr	r2, [pc, #196]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e056      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a32      	ldr	r2, [pc, #200]	; (8000444 <GPIO_PeriClockControl+0x138>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e04b      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <GPIO_PeriClockControl+0x13c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d147      	bne.n	8000424 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a26      	ldr	r2, [pc, #152]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800039a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e040      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x124>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a21      	ldr	r2, [pc, #132]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003b0:	f023 0301 	bic.w	r3, r3, #1
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e035      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <GPIO_PeriClockControl+0x12c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003c6:	f023 0302 	bic.w	r3, r3, #2
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e02a      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a1a      	ldr	r2, [pc, #104]	; (800043c <GPIO_PeriClockControl+0x130>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003dc:	f023 0304 	bic.w	r3, r3, #4
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e01f      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <GPIO_PeriClockControl+0x134>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <GPIO_PeriClockControl+0x128>)
 80003f2:	f023 0308 	bic.w	r3, r3, #8
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e014      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a11      	ldr	r2, [pc, #68]	; (8000444 <GPIO_PeriClockControl+0x138>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <GPIO_PeriClockControl+0x128>)
 8000408:	f023 0310 	bic.w	r3, r3, #16
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e009      	b.n	8000424 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <GPIO_PeriClockControl+0x13c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d105      	bne.n	8000424 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <GPIO_PeriClockControl+0x128>)
 800041e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40021000 	.word	0x40021000
 8000448:	40021c00 	.word	0x40021c00

0800044c <GPIO_Init>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800044c:	b480      	push	{r7}
 800044e:	b087      	sub	sp, #28
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; 			//temporary register
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]

	//1. configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d81f      	bhi.n	80004a0 <GPIO_Init+0x54>
	{
		// it is a non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	// clearing the bit of the GPIO pin
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	4619      	mov	r1, r3
 800047e:	2303      	movs	r3, #3
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		// setting the bit
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e0a1      	b.n	80005e4 <GPIO_Init+0x198>
	}
	else
	{
		// it is an interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d117      	bne.n	80004d8 <GPIO_Init+0x8c>
		{
			//1. configure the FTSR falling trigger selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b9e      	ldr	r3, [pc, #632]	; (8000724 <GPIO_Init+0x2d8>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a9a      	ldr	r2, [pc, #616]	; (8000724 <GPIO_Init+0x2d8>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b99      	ldr	r3, [pc, #612]	; (8000724 <GPIO_Init+0x2d8>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a94      	ldr	r2, [pc, #592]	; (8000724 <GPIO_Init+0x2d8>)
 80004d2:	400b      	ands	r3, r1
 80004d4:	6093      	str	r3, [r2, #8]
 80004d6:	e035      	b.n	8000544 <GPIO_Init+0xf8>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b05      	cmp	r3, #5
 80004de:	d117      	bne.n	8000510 <GPIO_Init+0xc4>
		{
			//1. configure the RTSR rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b90      	ldr	r3, [pc, #576]	; (8000724 <GPIO_Init+0x2d8>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a8c      	ldr	r2, [pc, #560]	; (8000724 <GPIO_Init+0x2d8>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6093      	str	r3, [r2, #8]
			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b8b      	ldr	r3, [pc, #556]	; (8000724 <GPIO_Init+0x2d8>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a86      	ldr	r2, [pc, #536]	; (8000724 <GPIO_Init+0x2d8>)
 800050a:	400b      	ands	r3, r1
 800050c:	60d3      	str	r3, [r2, #12]
 800050e:	e019      	b.n	8000544 <GPIO_Init+0xf8>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b06      	cmp	r3, #6
 8000516:	d115      	bne.n	8000544 <GPIO_Init+0xf8>
		{
			//1. configure the FTSR falling trigger selection register & RTSR rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b82      	ldr	r3, [pc, #520]	; (8000724 <GPIO_Init+0x2d8>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a7e      	ldr	r2, [pc, #504]	; (8000724 <GPIO_Init+0x2d8>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6093      	str	r3, [r2, #8]
			// clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b7d      	ldr	r3, [pc, #500]	; (8000724 <GPIO_Init+0x2d8>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a79      	ldr	r2, [pc, #484]	; (8000724 <GPIO_Init+0x2d8>)
 8000540:	430b      	orrs	r3, r1
 8000542:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR (system configuration external interrupt control register)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	089b      	lsrs	r3, r3, #2
 800054a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	f003 0303 	and.w	r3, r3, #3
 8000554:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a73      	ldr	r2, [pc, #460]	; (8000728 <GPIO_Init+0x2dc>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d024      	beq.n	80005aa <GPIO_Init+0x15e>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a71      	ldr	r2, [pc, #452]	; (800072c <GPIO_Init+0x2e0>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d01d      	beq.n	80005a6 <GPIO_Init+0x15a>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a70      	ldr	r2, [pc, #448]	; (8000730 <GPIO_Init+0x2e4>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d016      	beq.n	80005a2 <GPIO_Init+0x156>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a6e      	ldr	r2, [pc, #440]	; (8000734 <GPIO_Init+0x2e8>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d00f      	beq.n	800059e <GPIO_Init+0x152>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a6d      	ldr	r2, [pc, #436]	; (8000738 <GPIO_Init+0x2ec>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d008      	beq.n	800059a <GPIO_Init+0x14e>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a6b      	ldr	r2, [pc, #428]	; (800073c <GPIO_Init+0x2f0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <GPIO_Init+0x14a>
 8000592:	2305      	movs	r3, #5
 8000594:	e00a      	b.n	80005ac <GPIO_Init+0x160>
 8000596:	2300      	movs	r3, #0
 8000598:	e008      	b.n	80005ac <GPIO_Init+0x160>
 800059a:	2304      	movs	r3, #4
 800059c:	e006      	b.n	80005ac <GPIO_Init+0x160>
 800059e:	2303      	movs	r3, #3
 80005a0:	e004      	b.n	80005ac <GPIO_Init+0x160>
 80005a2:	2302      	movs	r3, #2
 80005a4:	e002      	b.n	80005ac <GPIO_Init+0x160>
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <GPIO_Init+0x160>
 80005aa:	2300      	movs	r3, #0
 80005ac:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005ae:	4b64      	ldr	r3, [pc, #400]	; (8000740 <GPIO_Init+0x2f4>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	4a63      	ldr	r2, [pc, #396]	; (8000740 <GPIO_Init+0x2f4>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005ba:	7c7a      	ldrb	r2, [r7, #17]
 80005bc:	7cbb      	ldrb	r3, [r7, #18]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	fa02 f103 	lsl.w	r1, r2, r3
 80005c4:	4a5f      	ldr	r2, [pc, #380]	; (8000744 <GPIO_Init+0x2f8>)
 80005c6:	7cfb      	ldrb	r3, [r7, #19]
 80005c8:	3302      	adds	r3, #2
 80005ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable the EXTI external interrupt delivery using IMR interrupt mask register
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005ce:	4b55      	ldr	r3, [pc, #340]	; (8000724 <GPIO_Init+0x2d8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a51      	ldr	r2, [pc, #324]	; (8000724 <GPIO_Init+0x2d8>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	799b      	ldrb	r3, [r3, #6]
 80005ec:	461a      	mov	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	// clearing the bit of the GPIO pin
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	2303      	movs	r3, #3
 8000608:	408b      	lsls	r3, r1
 800060a:	43db      	mvns	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	400a      	ands	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;		// setting the bit
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6899      	ldr	r1, [r3, #8]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	430a      	orrs	r2, r1
 8000624:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPupdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	79db      	ldrb	r3, [r3, #7]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	// clearing the bit of the GPIO pin
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68da      	ldr	r2, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	2303      	movs	r3, #3
 800064a:	408b      	lsls	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	400a      	ands	r2, r1
 8000656:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		// setting the bit
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68d9      	ldr	r1, [r3, #12]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	430a      	orrs	r2, r1
 8000666:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7a1b      	ldrb	r3, [r3, #8]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	// clearing the bit of the GPIO pin
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	2301      	movs	r3, #1
 800068a:	408b      	lsls	r3, r1
 800068c:	43db      	mvns	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	400a      	ands	r2, r1
 8000696:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;		// setting the bit
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6859      	ldr	r1, [r3, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d131      	bne.n	8000718 <GPIO_Init+0x2cc>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	73fb      	strb	r3, [r7, #15]
		// configure the alternate function register

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	7c3a      	ldrb	r2, [r7, #16]
 80006cc:	3208      	adds	r2, #8
 80006ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	220f      	movs	r2, #15
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	4001      	ands	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	7c3a      	ldrb	r2, [r7, #16]
 80006f4:	3208      	adds	r2, #8
 80006f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7a5b      	ldrb	r3, [r3, #9]
 80006fe:	461a      	mov	r2, r3
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	4618      	mov	r0, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	7c3a      	ldrb	r2, [r7, #16]
 8000710:	4301      	orrs	r1, r0
 8000712:	3208      	adds	r2, #8
 8000714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40013c00 	.word	0x40013c00
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40021000 	.word	0x40021000
 800073c:	40021c00 	.word	0x40021c00
 8000740:	40023800 	.word	0x40023800
 8000744:	40013800 	.word	0x40013800

08000748 <GPIO_WriteToOutputPin>:
 *
 *****************************************************************************************************/


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
 8000754:	4613      	mov	r3, r2
 8000756:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000758:	78bb      	ldrb	r3, [r7, #2]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d109      	bne.n	8000772 <GPIO_WriteToOutputPin+0x2a>
	{
		// write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	78fa      	ldrb	r2, [r7, #3]
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	615a      	str	r2, [r3, #20]
	else
	{
		// write 0 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000770:	e009      	b.n	8000786 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	78fa      	ldrb	r2, [r7, #3]
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	43d2      	mvns	r2, r2
 8000780:	401a      	ands	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <GPIO_ToggleOutputPin>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	78fa      	ldrb	r2, [r7, #3]
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	405a      	eors	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	615a      	str	r2, [r3, #20]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <GPIO_IRQInterruptConfig>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d133      	bne.n	800083a <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	d80a      	bhi.n	80007ee <GPIO_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007d8:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <GPIO_IRQInterruptConfig+0xf4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <GPIO_IRQInterruptConfig+0xf4>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
		{
			// program ICER2 register //64 to 95
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80007ec:	e059      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)	//32 to 63
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	d90f      	bls.n	8000814 <GPIO_IRQInterruptConfig+0x58>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b3f      	cmp	r3, #63	; 0x3f
 80007f8:	d80c      	bhi.n	8000814 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <GPIO_IRQInterruptConfig+0xf8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	f002 021f 	and.w	r2, r2, #31
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f202 	lsl.w	r2, r1, r2
 800080a:	4611      	mov	r1, r2
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <GPIO_IRQInterruptConfig+0xf8>)
 800080e:	430b      	orrs	r3, r1
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e046      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b3f      	cmp	r3, #63	; 0x3f
 8000818:	d943      	bls.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b5f      	cmp	r3, #95	; 0x5f
 800081e:	d840      	bhi.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <GPIO_IRQInterruptConfig+0xfc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	4611      	mov	r1, r2
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <GPIO_IRQInterruptConfig+0xfc>)
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	e033      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b1f      	cmp	r3, #31
 800083e:	d80a      	bhi.n	8000856 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <GPIO_IRQInterruptConfig+0x100>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <GPIO_IRQInterruptConfig+0x100>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	e025      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)	//32 to 63
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b1f      	cmp	r3, #31
 800085a:	d90f      	bls.n	800087c <GPIO_IRQInterruptConfig+0xc0>
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b3f      	cmp	r3, #63	; 0x3f
 8000860:	d80c      	bhi.n	800087c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <GPIO_IRQInterruptConfig+0x104>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	f002 021f 	and.w	r2, r2, #31
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <GPIO_IRQInterruptConfig+0x104>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e012      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)	//64 to 95
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b3f      	cmp	r3, #63	; 0x3f
 8000880:	d90f      	bls.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b5f      	cmp	r3, #95	; 0x5f
 8000886:	d80c      	bhi.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <GPIO_IRQInterruptConfig+0x108>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <GPIO_IRQInterruptConfig+0x108>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	e7ff      	b.n	80008a2 <GPIO_IRQInterruptConfig+0xe6>
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000e104 	.word	0xe000e104
 80008b8:	e000e108 	.word	0xe000e108
 80008bc:	e000e180 	.word	0xe000e180
 80008c0:	e000e184 	.word	0xe000e184
 80008c4:	e000e188 	.word	0xe000e188

080008c8 <GPIO_IRQPriorityConfig>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
	//1. IPRx register
	uint8_t iprx = IRQNumber / 4;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 0303 	and.w	r3, r3, #3
 80008e0:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	3304      	adds	r3, #4
 80008ea:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008f4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008f8:	6819      	ldr	r1, [r3, #0]
 80008fa:	7b7b      	ldrb	r3, [r7, #13]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	409a      	lsls	r2, r3
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000908:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800090c:	430a      	orrs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <GPIO_IRQHandling>:
 * @Note					- none
 *
 *****************************************************************************************************/

void GPIO_IRQHandling(uint8_t PinNumber)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber))
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <GPIO_IRQHandling+0x3c>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	2101      	movs	r1, #1
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	4013      	ands	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d009      	beq.n	800094c <GPIO_IRQHandling+0x30>
	{
		// clear
		EXTI->PR |= (1 << PinNumber);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <GPIO_IRQHandling+0x3c>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <GPIO_IRQHandling+0x3c>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6153      	str	r3, [r2, #20]
	}
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40013c00 	.word	0x40013c00

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4d0d      	ldr	r5, [pc, #52]	; (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000962:	1b64      	subs	r4, r4, r5
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2600      	movs	r6, #0
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4d0b      	ldr	r5, [pc, #44]	; (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 f820 	bl	80009b4 <_init>
 8000974:	1b64      	subs	r4, r4, r5
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2600      	movs	r6, #0
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	4798      	blx	r3
 8000986:	3601      	adds	r6, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	4798      	blx	r3
 8000990:	3601      	adds	r6, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009cc 	.word	0x080009cc
 8000998:	080009cc 	.word	0x080009cc
 800099c:	080009cc 	.word	0x080009cc
 80009a0:	080009d0 	.word	0x080009d0

080009a4 <memset>:
 80009a4:	4402      	add	r2, r0
 80009a6:	4603      	mov	r3, r0
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d100      	bne.n	80009ae <memset+0xa>
 80009ac:	4770      	bx	lr
 80009ae:	f803 1b01 	strb.w	r1, [r3], #1
 80009b2:	e7f9      	b.n	80009a8 <memset+0x4>

080009b4 <_init>:
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	bf00      	nop
 80009b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ba:	bc08      	pop	{r3}
 80009bc:	469e      	mov	lr, r3
 80009be:	4770      	bx	lr

080009c0 <_fini>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr
